#: import get_color_from_hex kivy.utils.get_color_from_hex
#: import Window kivy.core.window.Window
#: import smac_keys smac_keys.smac_keys

<ScreenManager>:

<Screen>:
    size_hint_max_x: dp(800)
    #on_children:
    center_x : app.screen_manager.center_x
    #on_enter:
    #    self.center_x = app.screen_manager.center_x
    on_pos:
        self.center_x = app.screen_manager.center_x
    on_size:
        self.center_x = app.screen_manager.center_x




<Label>:
	#color: app.colors["COLOR_TEXT"]

<Label_button>:
    size_hint_y: None
    height: app.grid_min
    color: app.colors["COLOR_TEXT"]
    bg_color: app.colors["COLOR_THEME"]
    canvas.before:
        Color:
            rgba: self.bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]

<Label_dropDown>:
    bg_color: app.colors["COLOR_THEME_BASIC"]
    canvas.before:
        Color:
            rgba: self.bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]
        Color:
            rgba: app.colors["COLOR_THEME_HIGHLIGHT"]
        Line:
            width: dp(1)
            points: [ root.x, root.y+root.height,  root.x, root.y, root.x+root.width, root.y, root.x+root.width, root.y+root.height,  root.x, root.y+root.height ]


<BoxLayout_header>:
    pos_hint: {'top': 1}
    size_hint: 1, None
    height: app.grid_min


<BoxLayout_container>:
    orientation: 'vertical'
    size_hint: 1, None
    height: self.minimum_height
    pos_hint: {'center_x': 0.5}
    padding: dp(1), dp(1)
    spacing: dp(10)

#<BoxLayout_addGroupContent>:
#	TextInput_custom:
#		text: ""
#		hint_text: "Group Name"
#		id: id_group_name
#		size_hint_y: None
#	Button:
#		text: "add"
#		size_hint_y: None
#		on_release:
#			app.add_group( id_group_name.text)

<Widget_tab>:
    size_hint_y: None
    height: app.grid_min
    source: app.source_icon + "CLOUD.png"
    orientation: 'vertical'
    canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_HIGHLIGHT"] if(app.screen_manager.current == root.screen) else (0,0,0,0)
        Rectangle:
            pos: self.x, self.y+self.top
            size: self.width, dp(3)
    Widget:
        size_hint_y: 1
        height: app.grid_min - dp(10)
        center: root.center
        Image:
            width: app.grid_min/2
            height: app.grid_min/2
            #size_hint_x: 1
            source: root.source
            center: self.parent.center
    Label_custom:
        height: dp(15)
        text: root.text
        font_size: dp(12)
        color: app.colors["COLOR_THEME_HIGHLIGHT"] if(app.screen_manager.current == root.screen) else app.colors["COLOR_TEXT"]

<Widget_base>:
	height: self.minimum_height
	icon1:  "TOP.png"
	icon2:  "SETTING.png"
	icon3: "TRANSPARENT.png"
	BoxLayout:
        size_hint_y: None
        height: app.grid_min
        Label:
            text: root.text + root.text1
            bold: True
            color: app.colors["COLOR_TEXT"]
        Image_iconButton:
            id: id_icon3
            source: app.source_icon + root.icon3
            disable: True if root.disable_icon3 else False
            opacity: 0 if root.disable_icon3 else 1
            width: 0 if root.disable_icon3 else app.grid_min
        Image_iconButton:
            id: id_icon2
            source: app.source_icon + root.icon2
            disable: True if root.disable_icon2 else False
            opacity: 0 if root.disable_icon2 else 1
            width: 0 if root.disable_icon2 else app.grid_min
        Image_iconButton:
            id: id_icon1
            source: app.source_icon + root.icon1
            disable: True if root.disable_icon1 else False
            opacity: 0 if root.disable_icon1 else 1
            width: 0 if root.disable_icon1 else app.grid_min


<Widget_network>:
	size_hint: 1, None
	#height: dp(200)
	spacing: app.grid_min/2
	height: self.minimum_height
	font_size: dp(20)
	padding: dp(10), dp(10)
	canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC"]
        RoundedRectangle:
            #size: self.width, app.grid_min
            #pos: self.x, self.top-app.grid_min
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]

<Widget_context>:
	size_hint: 1, None
	spacing: app.grid_min/3
	height: self.minimum_height
	font_size: dp(20)
	padding: dp(10), dp(10)
	icon1: 'CLOSE.png'
	icon2: "PLUS.png"
	icon3: "CLOUD.png"
	canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC"]
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]
    Label_title:
        id: id_label_act
        text: "Actions"
        color: app.colors["COLOR_TEXT"]
    BoxLayout_container:
        spacing: dp(5)
        height: self.minimum_height
        id: id_action_container
    Label_title:
        id: id_label_trig
        text: "Triggers"
        color: app.colors["COLOR_TEXT"]
    BoxLayout_container:
        spacing: dp(5)
        height: self.minimum_height
        id: id_trigger_container

<BoxLayout_action>:
    size_hint_y: None
    height: self.minimum_height
    source: 'CHECK.png'
    spacing: dp(2)
    opacity: 1 if self.status else .5
    Image_iconButton:
        source: app.source_icon + root.source
        opacity: root.status
        canvas.before:
            Color:
                rgba: app.colors["COLOR_THEME_HIGHLIGHT"] if root.status else (0,0,0,0)
            RoundedRectangle:
                size: self.width*.8, self.height*.8
                pos: self.x + dp(5), self.y + dp(5)
                radius: [ app.grid_min/2, ]
    Label_custom:
        text: root.text
        #text_size: self.size
        text_size: self.width, None
        height: self.texture_size[1]
        halign: 'left'
        padding: dp(10), dp(15)
        canvas.before:
            Color:
                rgba: app.colors["COLOR_THEME_BASIC_3"]
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [ dp(5), ]
        Image_iconButton:
            id: id_btn_remove_action
            source: app.source_icon + "CLOSE.png"
            pos: self.parent.right-self.width, self.parent.y


<BoxLayout_trigger>:
    size_hint_y: None
    height: self.minimum_height
    source: 'CHECK.png'
    spacing: dp(2)
    opacity: 1 if self.status else .5
    Image_iconButton:
        source: app.source_icon + root.source
        opacity: root.status
        canvas.before:
            Color:
                rgba: app.colors["COLOR_THEME_HIGHLIGHT"] if root.status else (0,0,0,0)
            RoundedRectangle:
                size: self.width*.8, self.height*.8
                pos: self.x + dp(5), self.y + dp(5)
                radius: [ app.grid_min/2, ]
    Label_custom:
        text: root.text
        text_size: self.width, None
        height: self.texture_size[1]
        halign: 'left'
        padding: dp(10), dp(15)
        canvas.before:
            Color:
                rgba: app.colors["COLOR_THEME_BASIC_3"]
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [ dp(5), ]
        Image_iconButton:
            id: id_btn_remove_trigger
            source: app.source_icon + "CLOSE.png"
            pos: self.parent.right-self.width, self.parent.y

<Widget_device>:
	size_hint: 1, None
	#height: dp(50)
	#padding: dp(1)
	spacing: dp(5)
	#height: self.minimum_height
	font_size: dp(15)
	disable: self.hide
	#opacity: 0 if self.hide else 1
	#height: 0 if self.hide else self.minimum_height
	canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC_3"]
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]




<Widget_property>:
	size_hint: 1, None
	height: dp(70)
	orientation: 'vertical'
	disable: self.hide
	source:  'TRANSPARENT.png'
	canvas.before:
        Color:
            rgba: [1,1,1,0]
        Rectangle:
            size: self.size
            pos: self.pos
    Label_button:
        id: id_property_name
        bg_color: app.colors["COLOR_THEME_BASIC_3"]
        size_hint_y: None
        height: dp(20)
        font_size: dp(15)
        text: root.text
        color: app.colors["COLOR_TEXT"]
        bold: True
        halign: 'left'
        padding: dp(10), 0
        text_size: self.size
    BoxLayout:
        size_hint_y: None
        height: app.grid_min
        Image_iconButton:
            source: app.source_icon + root.source
        AnchorLayout:
            anchor_x:'right'
            anchor_y:'center'
            id: id_slider_container
        #Slider:
        #    id: id_slider
        #    size_hint: None, None
        #    size: app.grid_min, app.grid_min
        #    pos_hint: { 'left': 0.5 }
        #    min: int(root.min)
        #    max: int(root.max)
        #    step: 1
        #    value: int(root.value)
        #    on_value:
        #        app.change_property(root, self.value)

        Label:
            size_hint: None, None
            opacity: 0 if(root.value_min == root.value_max) else 1
            size: app.grid_min*1.5, root.height
            color: app.colors["COLOR_TEXT"]
            font_size: dp(15)
            text: str( int(root.value) )
        #Label:
        #    size_hint: None, None
        #    size: app.grid_min*1.5, root.height
        #    color: get_color_from_hex("#404040")
        #    font_size: dp(15)
        #    text: str( root.MSG_COUNTER )
            #pos: root.x+id_slider.width, root.y


<Widget_slider>:
    size_hint: None, 1
    width: app.grid_min*4
    value_track: True
    value_track_color: app.colors["COLOR_THEME_HIGHLIGHT"]
    value_track_width: dp(4)
    background_horizontal: app.source_icon + 'TRANSPARENT.png'
    background_disabled_horizontal: app.source_icon + 'TRANSPARENT.png'
    cursor_disabled_image: app.source_icon + 'TRANSPARENT.png'
    cursor_image: app.source_icon + 'CIRCLE.png'
    canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC"]
        RoundedRectangle:
            size: self.width-dp(20), dp(8)
            pos: self.x+dp(12), self.center_y-self.height/12
            radius: [ dp(2), ]

<Widget_switch>:
    size_hint: None, 1
    width: dp(60)
    value: 0
    disabled: 0
    opacity: 0.8 if self.disabled else 1
    color_ball: app.colors["COLOR_TEXTINPUT"]
    color_bg: app.colors["COLOR_THEME_BASIC"]
    on_press:
        #print(self.last_touch)
        self.value  = 1-self.value
        #print("self.value", self.value)
    canvas.before:
        Color:
            rgba: self.color_bg
        RoundedRectangle:
            pos: self.x , self.y+dp(15)
            size: self.width, dp(30)
            radius: [ dp(15), ]
    Widget:
        id: id_ball
        size_hint: None, 1
        size: dp(25), dp(25)
        pos: root.x+dp(2.5), root.y+dp(2.5)
        canvas.before:
            Color:
                rgba: root.color_ball
            RoundedRectangle:
                pos: self.x, self.y+(self.height/2)+(self.height/10)
                size: self.size
                radius: [ self.height/2, ]


<Image_icon>:
    size_hint: None, None
    size: app.grid_min, app.grid_min
    Image:
        size_hint: None, None
        size: self.parent.width/2, self.parent.height/2
        allow_stretch: True
        center: self.parent.center
        source: root.source

<Image_iconButton>:
    size_hint: None, None
    #pos_hint: {'center_x': .5, 'center_y': .5}
    size: app.grid_min, app.grid_min
    #texture_size: app.grid_min, app.grid_min
    #mipmap: True
    disabled_icon: app.source_icon + 'TRANSPARENT.png'
    Image:
        size_hint: None, None
        size: self.parent.width/2, self.parent.height/2
        allow_stretch: True
        center: self.parent.center
        source: root.disabled_icon if(root.disabled) else root.source
        canvas.before:
            PushMatrix
            Rotate:
                angle: root.angle
                origin: root.center
        canvas.after:
            PopMatrix

<Widget_block>:
    orientation: 'vertical'
    padding: dp(5)
    size_hint: 1, None
    height: self.minimum_height
    bg_color: app.colors["COLOR_THEME_BASIC_3"]
    canvas.before:
        Color:
            rgba: self.bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]
    Label:
        text: root.text
        size_hint: 1, None
        height: app.grid_min
        color: app.colors["COLOR_TEXT"]

<Button_custom1>:
    size_hint: None, None
    size: app.grid_min*2, app.grid_min
    font_size: app.grid_min/4
    color: get_color_from_hex("#fefefe")

<Button_link>:
    size_hint: None, None
    color: get_color_from_hex("#009acd")
    #markup: True
    #text_size: self.width, self.text_size[1]
    size_hint_min_x: app.grid_min
    size: self.texture_size[0]+dp(20), self.height
    height: app.grid_min
    #padding: dp(20), 0
    underline: True

<Dropdown_custom>:
    text: ""
    size_hint: 1, None
    id_dropdown: id_dropdown.__self__ # weak_reference err: ref: https://github.com/kivy/kivy/issues/4929
    Label_button:
        id: id_label
        text: root.text
        on_parent:
            id_dropdown.dismiss()
        on_release:
            id_dropdown.open(self)
            id_img.source = app.source_iconid_config_state_text+'TOP.png'
        Image_icon:
            #disabled: True
            id: id_img
            source: app.source_icon + 'BOTTOM.png'
            pos: id_label.right - app.grid_min, id_label.y
    DropDown:
        id: id_dropdown
        on_dismiss:
            id_img.source = app.source_icon+'BOTTOM.png'
        on_pos:
            #id_dropdown.pos = self.pos
            #id_dropdown.open(root)

        #pos: root.pos
        on_select:
            #id_label.text = '{}'.format(args[1])
            root.text = '{}'.format(args[1])
            id_img.source = app.source_icon + 'BOTTOM.png'

<BoxLayout_menu>:
    size_hint_x: None
    size_hint_y: None
    height: self.minimum_height
    width: self.parent.width
    pos: 0,0
    #size: self.parent.size
    canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC_3"]
        Rectangle:
            size: self.size
            pos: self.pos

<Label_menuItem>:
    color: app.colors["COLOR_TEXT"]
    bg_color: app.colors["COLOR_THEME_BASIC_2"]
    size_hint: 1, None
    height: app.grid_min
    text_size:  self.width, app.grid_min
    bold: True
    padding: dp(10), dp(15)
    #line_height: self.height/10
    halign: 'left'
    canvas.before:
        Color:
            rgba: self.bg_color
        Rectangle:
            size: self.size
            pos: self.pos

<Label_menuItem2>:
    color: app.colors["COLOR_TEXT"]
    bg_color: app.colors["COLOR_THEME_BASIC_2"]
    size_hint: 1, None
    height: app.grid_min/2
    text_size:  self.size
    bold: True
    padding: dp(10), dp(5)
    line_height: 1
    halign: 'left'
    canvas.before:
        Color:
            rgba: self.bg_color
        Rectangle:
            size: self.size
            pos: self.pos

<Label_custom>:
    size_hint: 1, None
    height: app.grid_min
    color: app.colors["COLOR_TEXT"]
    #color: get_color_from_hex("#404040")

<Label_title>:
    size_hint: 1, None
    height: app.grid_min/2
    text_size: self.size
    padding: dp(10), dp(10)

<ModalView_custom>:
    separator_color: 1,0,0,1
    separator_height: dp(2)
    _container: container
    GridLayout:
        id: id_grid_container
        padding: '12dp'
        cols: 1
        size_hint: None, None
        pos: root.pos
        size: root.size
        Label:
            text: root.title
            color: root.title_color
            size_hint_y: None
            height: self.texture_size[1] + dp(16)
            text_size: self.width - dp(16), None
            font_size: root.title_size
            font_name: root.title_font
            halign: root.title_align
            Image_iconButton:
                id: id_btn_close
                pos: self.parent.right-self.width+dp(5), self.parent.y-dp(5)
                source: 'icons/DARK/CLOSE.png'
                on_release:
                    print("dismiss", self)
                    #root.dismiss()
        Widget:
            size_hint_y: None
            height: dp(4)
            canvas:
                Color:
                    rgba: root.separator_color
                Rectangle:
                    pos: self.x, self.y + root.separator_height / 2.
                    size: self.width, root.separator_height
        BoxLayout:
            id: container



<BoxLayout_updatePropNameContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*2
    TextInput_custom:
        id: id_name_property
        size_hint_y: None
        height: app.grid_min
        hint_text: "Property Name"
        on_text:
            root.name_property = self.text
    Button_custom1:
        id: id_btn
        size_hint: 1, None
        height: app.grid_min
        text: "Update Property"

<BoxLayout_addContextContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*2
    TextInput_custom:
        id: id_name_context
        size_hint_y: None
        height: app.grid_min
        hint_text: "Context Name"
        next: id_btn
        on_text:
            root.name_context = self.text
    Button_custom1:
        id: id_btn
        size_hint: 1, None
        height: app.grid_min
        text: "Add Context"

<BoxLayout_btnActionTriggerContent>:
    orientation: 'vertical'
    size_hint_y: None
    height: app.grid_min*2
    Button_custom1:
        size_hint_x: 1
        text: "Add Action"
    Button_custom1:
        size_hint_x: 1
        text: "Add Trigger"

<BoxLayout_register>:
    #BoxLayout_container:
    spacing: dp(10)
    height: app.grid_min * 4
    TextInput_custom:
        size_hint_y: None
        height: app.grid_min
        hint_text: "Email"
        id: id_text_email
        text: app.EMAIL
    TextInput_custom:
        size_hint_y: None
        height: app.grid_min
        hint_text: "Mobile Number"
        id: id_text_mobile_number
        text: app.MOBILE_NUMBER
    TextInput_custom:
        size_hint_y: None
        height: app.grid_min
        hint_text: "PIN"
        id: id_text_email_pin
        disabled: True
    Label_custom:
        id: id_label_info
        text: ""
        halign: 'center'
        color: app.colors["COLOR_TEXTINPUT"]
    Label_custom:
        id: id_label_info2
        text: ""
        halign: 'center'
        color: app.colors["COLOR_TEXTINPUT"]
    BoxLayout_container:
        orientation: 'horizontal'
        Button_custom1:
            text: "SEND PIN"
            size_hint_x: 1
            id: id_btn_send_pin
        Button_custom1:
            text: "VERIFY PIN"
            size_hint_x: 1
            id: id_btn_verify_pin


<BoxLayout_block>:
    size_hint_y: None
    height: self.minimum_height
    active: True
    canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC"]
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]
    CheckBox_custom:
        size_hint: None, None
        size: app.grid_min, app.grid_min
        id: id_chkbox
        active: root.active
        group: 'type_trigger'
        value: root.type_trigger
    Label_custom:
        text_size: self.size
        halign: 'left'
        padding: dp(10), dp(15)
        text: root.text

<StackLayout_block>:
    size_hint_y: None
    #height: self.minimum_height
    minimum_height: app.grid_min
    height: app.grid_min*2
    active: True
    orientation: 'lr-tb'
    canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC"]
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]
    CheckBox_custom:
        size_hint: None, None
        size: app.grid_min, app.grid_min
        id: id_chkbox
        active: root.active
        group: 'type_trigger'
        value: root.type_trigger



<BoxLayout_addActionContent>:
    size_hint_y: None
    height: id_stack_container.minimum_height + app.grid_min*2
    orientation: 'vertical'
    StackLayout_block:
        id: id_stack_container
        #height: self.minimum_height
        #minimum_height: app.grid_min
        #height: app.grid_min
        text: ""
        Label_custom:
            text: "When "
            size_hint_x:  None
            width: self.texture_size[0]
            #size: self.texture_size[0], self.height
        Button_link:
            text: root.data["name_device"]
            id: id_btn_sel_device
            size_hint_x: None
        Label_custom:
            text: " and "
            size_hint_x: None
            width: self.texture_size[0]
        Button_link:
            text: root.data["name_property"]
            id: id_btn_sel_property
            size_hint_x: None
        Label_custom:
            text: " and "
            size_hint_x: None
            width: self.texture_size[0]
            width: self.texture_size[0]
        Button_link:
            text: root.data["value"]
            id: id_btn_sel_value
            size_hint_x: None
        #Widget:
    Button_custom1:
        text: "Add Action"
        size_hint_x: 1
        id: id_btn_add_action


<BoxLayout_addTriggerContent>:
    size_hint_y: None
    height: app.grid_min * 6
    orientation: 'vertical'
    on_DOW:
        print(self.DOW)
    BoxLayout_container:
        StackLayout_block:
            text: ""
            type_trigger: smac_keys["TYPE_TRIGGER_PROP"]
            Label_custom:
                text: "When "
                size_hint_x:  None
                width: self.texture_size[0]
            Button_link:
                text: root.data["name_device"]
                id: id_btn_sel_device
            Label_custom:
                text: " and "
                size_hint_x:  None
                width: self.texture_size[0]
            Button_link:
                text: root.data["name_property"]
                id: id_btn_sel_property
            Label_custom:
                text: " and "
                size_hint_x:  None
                width: self.texture_size[0]
            Button_link:
                text: root.data["value"]
                id: id_btn_sel_value
        StackLayout_block:
            height: app.grid_min*6
            type_trigger: smac_keys["TYPE_TRIGGER_TIME"]
            Label_custom:
                text: "When"
                size_hint_x:  None
                width: self.texture_size[0]
            #Button_link:
            #    text: root.data["name_device"]
            #    id: id_btn_sel_device1
            Label_custom:
                text: "time :"
                size_hint_x:  None
                width: self.texture_size[0]
                #id: id_btn_sel_property
            Button_link:
                text: root.data["value_hour"]
                time_selection: "hour"
                id: id_btn_sel_hour
            Label_custom:
                text: " : "
                size_hint_x:  None
                width: self.texture_size[0]
            Button_link:
                text: root.data["value_minute"]
                time_selection: "minute"
                id: id_btn_sel_minute
            BoxLayout_container:
                size_hint_y: None
                height: app.grid_min
                orientation: "horizontal"
                padding: dp(10)
                CheckBox_custom:
                    #active: True
                    on_active:
                        id_dow_container.opacity = .5 if(self.active) else 1
                        id_dow_container.disabled = 1 if(self.active) else 0
                        root.DOW = [1,1,1,1,1,1,1] if(self.active) else [0,0,0,0,0,0,0]
                Label_custom2:
                    text: "All Days"
            StackLayout:
                id: id_dow_container
                size_hint_y: None
                minimum_height: app.grid_min
                height: app.grid_min*2
                orientation: 'lr-tb'
                spacing: dp(10)
                padding: dp(10)
                CheckBox_custom:
                    index: 0
                    on_active:
                        del root.DOW[self.index]
                        root.DOW.insert(self.index, (1 if self.active else 0) )
                Label_custom2:
                    text: "Mon"

                CheckBox_custom:
                    index: 1
                    on_active:
                        del root.DOW[self.index]
                        root.DOW.insert(self.index, (1 if self.active else 0) )
                Label_custom2:
                    text: "Tue"

                CheckBox_custom:
                    index: 2
                    on_active:
                        del root.DOW[self.index]
                        root.DOW.insert(self.index, (1 if self.active else 0) )
                Label_custom2:
                    text: "Wed"

                CheckBox_custom:
                    index: 3
                    on_active:
                        del root.DOW[self.index]
                        root.DOW.insert(self.index, (1 if self.active else 0) )
                Label_custom2:
                    text: "Thu"

                CheckBox_custom:
                    index: 4
                    on_active:
                        del root.DOW[self.index]
                        root.DOW.insert(self.index, (1 if self.active else 0) )
                Label_custom2:
                    text: "Fri"

                CheckBox_custom:
                    index: 5
                    on_active:
                        del root.DOW[self.index]
                        root.DOW.insert(self.index, (1 if self.active else 0) )
                Label_custom2:
                    text: "Sat"

                CheckBox_custom:
                    index: 6
                    on_active:
                        del root.DOW[self.index]
                        root.DOW.insert(self.index, (1 if self.active else 0) )
                Label_custom2:
                    text: "Sun"

            #Widget:
        Button_custom1:
            text: "Add Trigger"
            size_hint_x: 1
            id: id_btn_add_trigger

<Label_custom2@Label_custom>:
    size_hint_x:  None
    width: self.texture_size[0]

<CheckBox_custom>:
    size_hint: None, None
    size: app.grid_min/2, app.grid_min
    #id: id_chkbox
    #active: root.active
    #group: 'type_trigger'
    #value: root.type_trigger
    background_checkbox_normal: app.source_icon + "SQUARE.png"
    background_checkbox_down: app.source_icon + "SQUARE_CHECK.png"
    background_checkbox_disabled_normal: app.source_icon + "SQUARE.png"
    background_checkbox_disabled_down: app.source_icon + "SQUARE_CHECK.png"
    background_radio_normal: app.source_icon + "CIRCLE_THIN.png"
    background_radio_down: app.source_icon + "CIRCLE_CHECK.png"
    background_radio_disabled_normal: app.source_icon + "CIRCLE_THIN.png"
    background_radio_diabled_down: app.source_icon + "CIRCLE_CHECK.png"

<BoxLayout_addHomeContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*2
    TextInput_custom:
        id: id_name_home
        size_hint_y: None
        height: app.grid_min
        hint_text: "Home Name"
        on_text:
            root.name_home = self.text
    Button_custom1:
        id: id_btn
        size_hint: 1, None
        height: app.grid_min
        text: "Add Home"

<BoxLayout_addRoomContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*2
    TextInput_custom:
        id: id_name_topic
        hint_text: "Room Name"
        size_hint_y: None
        height: app.grid_min
        on_text:
            root.name_topic = self.text
    Button_custom1:
        id: id_btn
        size_hint_x: 1
        size_hint_y: None
        height: app.grid_min
        text: "Add Room"

<BoxLayout_addTopicContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*3
    TextInput_custom:
        id: id_name_home
        hint_text: "Home Name"
        size_hint_y: None
        height: app.grid_min
        on_text:
            root.name_home = self.text
    TextInput_custom:
        id: id_name_room
        hint_text: "Room Name"
        size_hint_y: None
        height: app.grid_min
        on_text:
            root.name_room = self.text
    Button_custom1:
        id: id_btn
        size_hint_x: 1
        size_hint_y: None
        height: app.grid_min
        text: "Add Home"

<Widget_menuBG>:

<BoxLayout_loader>:
    size_hint_y: None
    height: app.grid_min*8
    orientation: 'vertical'
    icon: app.source_icon + "RESTART.png"
    Widget:
        size_hint: 1, None
        height: app.grid_min*3
        Image_iconButton:
            id: id_loader_icon
            start_anim: True
            source: root.icon
            center: self.parent.center_x, self.parent.y
    Label_custom:
        id: id_loader_text
        text: root.text
        size_hint: 1, None
        height: app.grid_min*3
        valign: 'top'
        height: app.grid_min
    Widget:

<BoxLayout_downloadUpdateContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*3
    Label_custom:
        height: app.grid_min*2
        halign: 'center'
        text: "New Updates Available.\nDo You Want to Update to New Version?"
    BoxLayout:
        size_hint: 1, None
        height: app.grid_min
        Button_custom1:
            size_hint_x: 1
            text: "Cancel"
            on_release:
                app.close_modal()
        Button_custom1:
            size_hint_x: 1
            text: "Download"
            on_release:
                app.download_app()

<BoxLayout_updateWifiContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: self.minimum_height
    TextInput_custom:
        hint_text: "SSID"
        id: id_ssid
        size_hint_y: None
        height: app.grid_min
    TextInput_custom:
        hint_text: "Password"
        id: id_password
        size_hint_y: None
        height: app.grid_min
    Button_custom1:
        text: 'Update Wifi Config'
        width: app.grid_min*3
        id: id_btn_update_wifi
        #on_release:
        #    root.update_device_wifi_config(app.APP_DATA["id_device"], id_ssid.text, id_password.text)

<TextInput_custom>:
    #foreground_color: [0,1,0,1]
    multiline: False
    background_color: app.colors["COLOR_TEXTINPUT"]
    height: app.grid_min
    line_height: self.height
    padding:0, self.line_height/1.5
    #line_spacing: dp(10)
    background_normal: ''
    background_disabled_normal: ''
    background_active: ''
    background_disabled_active: ''
    opacity: .75 if self.disabled else 1
    on_focus:
        print(args[1])
    canvas.after:
        Color:
            rgba: app.colors["COLOR_THEME_HIGHLIGHT"]
        Rectangle:
            pos: self.pos
            size: (self.width if self.focus else 0), dp(3)





