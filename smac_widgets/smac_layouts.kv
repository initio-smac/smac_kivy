#: import get_color_from_hex kivy.utils.get_color_from_hex
#: import Window kivy.core.window.Window

<Screen>:
    size_hint_max_x: dp(800)
    #on_children:
    center_x : app.screen_manager.center_x
    #on_enter:
    #    self.center_x = app.screen_manager.center_x
    on_pos:
        self.center_x = app.screen_manager.center_x
    on_size:
        self.center_x = app.screen_manager.center_x


<Label>:
	#color: app.colors["COLOR_TEXT"]

<Label_button>:
    size_hint_y: None
    height: app.grid_min
    color: app.colors["COLOR_TEXT"]
    bg_color: app.colors["COLOR_THEME"]
    canvas.before:
        Color:
            rgba: self.bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]

<Label_dropDown>:
    canvas.before:
        Color:
            rgba: self.bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]
    canvas.after:
        Color:
            rgba: app.colors["COLOR_THEME_HIGHLIGHT"]
        Rectangle:
            size: self.width, dp(5)
            pos: self.pos


<BoxLayout_header>:
    pos_hint: {'top': 1}
    size_hint: 1, None
    height: app.grid_min


<BoxLayout_container>:
    orientation: 'vertical'
    size_hint: 1, None
    height: self.minimum_height
    pos_hint: {'center_x': 0.5}
    padding: dp(1), dp(1)
    spacing: dp(10)

<BoxLayout_addGroupContent>:
	TextInput_custom:
		text: ""
		hint_text: "Group Name"
		id: id_group_name
		size_hint_y: None
	Button:
		text: "add"
		size_hint_y: None
		on_release:
			app.add_group( id_group_name.text)

<Widget_base>:
	height: self.minimum_height
	icon1: app.source_icon + "TOP.png"
	icon2: app.source_icon + "CLOSE.png"
	BoxLayout:
        size_hint_y: None
        height: app.grid_min
        Label:
            text: root.text + root.text1
            bold: True
            color: app.colors["COLOR_TEXT"]
        Image_iconButton:
            id: id_icon2
            source: root.icon2
            disable: True if root.disable_icon2 else False
            opacity: 0 if root.disable_icon2 else 1
            width: 0 if root.disable_icon2 else app.grid_min
        Image_iconButton:
            id: id_icon1
            source: root.icon1
            disable: True if root.disable_icon1 else False
            opacity: 0 if root.disable_icon1 else 1
            width: 0 if root.disable_icon1 else app.grid_min

<Widget_network>:
	size_hint: 1, None
	#height: dp(200)
	spacing: app.grid_min/2
	height: self.minimum_height
	font_size: dp(20)
	padding: dp(10), 0
	canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC"]
        RoundedRectangle:
            size: self.width, app.grid_min
            pos: self.x, self.top-app.grid_min
            radius: [ 0, ]

<Widget_device>:
	size_hint: 1, None
	#height: dp(50)
	#padding: dp(1)
	spacing: dp(5)
	#height: self.minimum_height
	font_size: dp(15)
	disable: self.hide
	#opacity: 0 if self.hide else 1
	#height: 0 if self.hide else self.minimum_height
	canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC_3"]
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]




<Widget_property>:
	size_hint: 1, None
	height: dp(70)
	orientation: 'vertical'
	disable: self.hide
	source: app.source_icon + 'FAN.png'
	canvas.before:
        Color:
            rgba: [1,1,1,0]
        Rectangle:
            size: self.size
            pos: self.pos
    Label:
        size_hint_y: None
        height: dp(20)
        font_size: dp(15)
        text: root.text
        color: app.colors["COLOR_TEXT"]
        bold: True
        halign: 'left'
        padding: dp(10), 0
        text_size: self.size
    BoxLayout:
        size_hint_y: None
        height: app.grid_min
        Image_iconButton:
            source: root.source
        AnchorLayout:
            anchor_x:'right'
            anchor_y:'center'
            id: id_slider_container
        #Slider:
        #    id: id_slider
        #    size_hint: None, None
        #    size: app.grid_min, app.grid_min
        #    pos_hint: { 'left': 0.5 }
        #    min: int(root.min)
        #    max: int(root.max)
        #    step: 1
        #    value: int(root.value)
        #    on_value:
        #        app.change_property(root, self.value)

        Label:
            size_hint: None, None
            opacity: 0 if(root.value_min == root.value_max) else 1
            size: app.grid_min*1.5, root.height
            color: app.colors["COLOR_TEXT"]
            font_size: dp(15)
            text: str( int(root.value) )
        #Label:
        #    size_hint: None, None
        #    size: app.grid_min*1.5, root.height
        #    color: get_color_from_hex("#404040")
        #    font_size: dp(15)
        #    text: str( root.MSG_COUNTER )
            #pos: root.x+id_slider.width, root.y


<Widget_slider>:
    size_hint: None, 1
    width: app.grid_min*4
    value_track: True
    value_track_color: app.colors["COLOR_THEME_HIGHLIGHT"]
    value_track_width: dp(4)
    background_horizontal: app.source_icon + 'TRANSPARENT.png'
    background_disabled_horizontal: app.source_icon + 'TRANSPARENT.png'
    cursor_disabled_image: app.source_icon + 'TRANSPARENT.png'
    cursor_image: app.source_icon + 'CIRCLE.png'
    canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC"]
        RoundedRectangle:
            size: self.width-dp(20), dp(8)
            pos: self.x+dp(12), self.center_y-self.height/12
            radius: [ dp(2), ]

<Widget_switch>:
    size_hint: None, 1
    width: dp(60)
    value: 0
    disabled: 0
    opacity: 0.8 if self.disabled else 1
    on_press:
        #print(self.last_touch)
        self.value  = 1-self.value
        #print("self.value", self.value)
    canvas.before:
        Color:
            rgba: self.color_bg
        RoundedRectangle:
            pos: self.x , self.y+dp(15)
            size: self.width, dp(30)
            radius: [ dp(15), ]
    Widget:
        id: id_ball
        size_hint: None, 1
        size: dp(25), dp(25)
        pos: root.x+dp(2.5), root.y+dp(2.5)
        canvas.before:
            Color:
                rgba: root.color_ball
            RoundedRectangle:
                pos: self.x, self.y+(self.height/2)+(self.height/10)
                size: self.size
                radius: [ self.height/2, ]


<Image_icon>:
    size_hint: None, None
    size: app.grid_min, app.grid_min

<Image_iconButton>:
    size_hint: None, None
    #pos_hint: {'center_x': .5, 'center_y': .5}
    size: app.grid_min, app.grid_min
    #texture_size: app.grid_min, app.grid_min
    #mipmap: True

    Image:
        size_hint: None, None
        size: self.parent.width/2, self.parent.height/2
        allow_stretch: True
        center: self.parent.center
        source: root.source
        canvas.before:
            PushMatrix
            Rotate:
                angle: root.angle
                origin: root.center
        canvas.after:
            PopMatrix

<Widget_block>:
    orientation: 'vertical'
    padding: dp(5)
    size_hint: 1, None
    height: self.minimum_height
    bg_color: app.colors["COLOR_THEME_BASIC_3"]
    canvas.before:
        Color:
            rgba: self.bg_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [ dp(5), ]
    Label:
        text: root.text
        size_hint: 1, None
        height: app.grid_min
        color: app.colors["COLOR_TEXT"]

<Button_custom1>:
    size_hint: None, None
    size: app.grid_min*4, app.grid_min

<Dropdown_custom>:
    text: ""
    size_hint: 1, None
    Label_button:
        id: id_label
        text: root.text
        on_parent:
            id_dropdown.dismiss()
        on_release: id_dropdown.open(self)
        Image_icon:
            #disabled: True
            source: app.source_icon + 'BOTTOM.png'
            pos: id_label.right - app.grid_min, id_label.y
    DropDown:
        id: id_dropdown
        on_pos:
            #id_dropdown.pos = self.pos
            #id_dropdown.open(root)

        #pos: root.pos
        on_select:
            #id_label.text = '{}'.format(args[1])
            root.text = '{}'.format(args[1])

<BoxLayout_menu>:
    size_hint_x: None
    size_hint_y: None
    height: self.minimum_height
    width: self.parent.width
    pos: 0,0
    #size: self.parent.size
    canvas.before:
        Color:
            rgba: app.colors["COLOR_THEME_BASIC_2"]
        Rectangle:
            size: self.size
            pos: self.pos

<Label_menuItem>:
    color: app.colors["COLOR_TEXT"]
    bg_color: app.colors["COLOR_THEME_BASIC_3"]
    size_hint: 1, None
    height: app.grid_min
    canvas.before:
        Color:
            rgba: self.bg_color
        Rectangle:
            size: self.size
            pos: self.pos

<Label_custom>:
    size_hint: 1, None
    height: app.grid_min
    #color: get_color_from_hex("#404040")

<ModalView_custom>:
    separator_color: app.colors["COLOR_THEME_HIGHLIGHT"]

<BoxLayout_addHomeContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*2
    TextInput_custom:
        id: id_name_home
        size_hint_y: None
        height: app.grid_min
        hint_text: "Home Name"
        on_text:
            root.name_home = self.text
    Button_custom1:
        id: id_btn
        size_hint: 1, None
        height: app.grid_min
        text: "Add Home"

<BoxLayout_addTopicContent>:
    orientation: 'vertical'
    size_hint: 1, None
    height: app.grid_min*2
    TextInput_custom:
        id: id_name_topic
        hint_text: "Room Name"
        size_hint_y: None
        height: app.grid_min
        on_text:
            root.name_topic = self.text
    Button_custom1:
        id: id_btn
        size_hint_x: 1
        size_hint_y: None
        height: app.grid_min
        text: "Add Room"

<Widget_menuBG>:

<BoxLayout_loader>:
    size_hint_y: None
    height: app.grid_min*8
    orientation: 'vertical'
    icon: app.source_icon + "RESTART.png"
    Widget:
        size_hint: 1, None
        height: app.grid_min*3
        Image_iconButton:
            source: root.icon
            center: self.parent.center_x, self.parent.y
            on_parent:
                self.start_animation()
    Label_custom:
        text: root.text
        size_hint: 1, None
        height: app.grid_min*3
        valign: 'top'
        height: app.grid_min
    Widget:


<TextInput_custom>:
    #foreground_color: [0,1,0,1]
    multiline: False
    background_color: app.colors["COLOR_TEXTINPUT"]
    padding_y: self.line_height
    #line_spacing: dp(10)
    background_normal: ''
    background_disabled_normal: ''
    background_active: ''
    background_disabled_active: ''
    opacity: .75 if self.disabled else 1
    on_focus:
        print(args[1])
    canvas.after:
        Color:
            rgba: [0,1,0,1]
        Rectangle:
            pos: self.pos
            size: (self.width if self.focus else 0), dp(3)





